From 69c5259816de507e8a7cbae6179e50cfe55440fd Mon Sep 17 00:00:00 2001
From: Litao Gao <litao.gao@windriver.com>
Date: Thu, 23 Mar 2017 08:38:06 -0400
Subject: [PATCH 09/14] Pike Rebase. ENG: Support for timezone setting - 17.x

Add support for timestamp display per timezone
---
 ceilometerclient/apiclient/base.py           |  2 +-
 ceilometerclient/common/utils.py             | 43 +++++++++++++++++++++++++++-
 ceilometerclient/tests/unit/v2/test_shell.py | 33 ++++++++++-----------
 3 files changed, 60 insertions(+), 18 deletions(-)

diff --git a/ceilometerclient/apiclient/base.py b/ceilometerclient/apiclient/base.py
index 6e9990a..315f6a2 100644
--- a/ceilometerclient/apiclient/base.py
+++ b/ceilometerclient/apiclient/base.py
@@ -509,7 +509,7 @@ class Resource(object):
             return
 
         new = self.manager.get(self.id)
-        if new:
+        if new and hasattr(new._info, '__iter__'):
             self._add_details(new._info)
             self._add_details(
                 {'x_request_id': self.manager.client.last_request_id})
diff --git a/ceilometerclient/common/utils.py b/ceilometerclient/common/utils.py
index 720691d..00493a7 100644
--- a/ceilometerclient/common/utils.py
+++ b/ceilometerclient/common/utils.py
@@ -15,6 +15,10 @@
 
 from __future__ import print_function
 
+from datetime import datetime
+import dateutil
+from dateutil import parser
+
 import os
 import textwrap
 
@@ -23,6 +27,8 @@ from oslo_utils import encodeutils
 import prettytable
 import six
 
+import re
+
 from ceilometerclient import exc
 
 
@@ -78,10 +84,15 @@ def print_list(objs, fields, field_labels, formatters=None, sortby=0):
         row = []
         for field in field_labels:
             if field in new_formatters:
-                row.append(new_formatters[field](o))
+                field_name = field.lower().replace(' ', '_')
+                data = getattr(o, field_name, '')
+                setattr(o, field_name, parse_date(data))
+                data = new_formatters[field](o)
+                row.append(data)
             else:
                 field_name = field.lower().replace(' ', '_')
                 data = getattr(o, field_name, '')
+                data = parse_date(data)
                 row.append(data)
         pt.add_row(row)
 
@@ -111,6 +122,34 @@ def format_nested_list_of_dict(l, column_names):
     return pt.get_string()
 
 
+def parse_date(string_data):
+    """Parses a datestring into a timezone aware Python datetime."""
+
+    if not isinstance(string_data, six.string_types):
+        return string_data
+
+    pattern = r'\d{4}-\d{2}-\d{2}[T| ]\d{2}:\d{2}:\d{2}(\.\d{6})?Z?'
+
+    def convert_date(matchobj):
+        formats = ["%Y-%m-%dT%H:%M:%S.%f", "%Y-%m-%d %H:%M:%S.%f",
+                   "%Y-%m-%dT%H:%M:%S", "%Y-%m-%d %H:%M:%S",
+                   "%Y-%m-%dT%H:%M:%SZ"]
+        datestring = matchobj.group(0)
+        if datestring:
+            for format in formats:
+                try:
+                    datetime.strptime(datestring, format)
+                    datestring += "+0000"
+                    parsed = parser.parse(datestring)
+                    converted = parsed.astimezone(dateutil.tz.tzlocal())
+                    return datetime.strftime(converted, format)
+                except Exception:
+                    pass
+        return datestring
+
+    return re.sub(pattern, convert_date, string_data)
+
+
 def print_dict(d, dict_property="Property", wrap=0):
     pt = prettytable.PrettyTable([dict_property, 'Value'], print_empty=False)
     pt.align = 'l'
@@ -126,11 +165,13 @@ def print_dict(d, dict_property="Property", wrap=0):
             for line in lines:
                 if wrap > 0:
                     line = textwrap.fill(six.text_type(line), wrap)
+                line = parse_date(line)
                 pt.add_row([col1, line])
                 col1 = ''
         else:
             if wrap > 0:
                 v = textwrap.fill(six.text_type(v), wrap)
+            v = parse_date(v)
             pt.add_row([k, v])
     encoded = encodeutils.safe_encode(pt.get_string())
     # FIXME(gordc): https://bugs.launchpad.net/oslo-incubator/+bug/1370710
diff --git a/ceilometerclient/tests/unit/v2/test_shell.py b/ceilometerclient/tests/unit/v2/test_shell.py
index 3b35531..e310c11 100644
--- a/ceilometerclient/tests/unit/v2/test_shell.py
+++ b/ceilometerclient/tests/unit/v2/test_shell.py
@@ -20,6 +20,7 @@ import mock
 import six
 from testtools import matchers
 
+from ceilometerclient.common import utils as ccc_utils
 from ceilometerclient import exc
 from ceilometerclient import shell as base_shell
 from ceilometerclient.tests.unit import test_shell
@@ -796,7 +797,7 @@ class ShellSampleListCommandTest(utils.BaseTestCase):
             q=None,
             limit=None)
 
-        self.assertEqual('''\
+        self.assertEqual(ccc_utils.parse_date('''\
 +--------------------------------------+----------+-------+----------------\
 +------+---------------------+
 | Resource ID                          | Name     | Type  | Volume         \
@@ -813,7 +814,7 @@ class ShellSampleListCommandTest(utils.BaseTestCase):
 | %    | 2013-10-15T05:40:29 |
 +--------------------------------------+----------+-------+----------------\
 +------+---------------------+
-''', sys.stdout.getvalue())
+'''), sys.stdout.getvalue())
 
     @mock.patch('sys.stdout', new=six.StringIO())
     def test_sample_list(self):
@@ -827,7 +828,7 @@ class ShellSampleListCommandTest(utils.BaseTestCase):
             q=None,
             limit=None)
 
-        self.assertEqual('''\
+        self.assertEqual(ccc_utils.parse_date('''\
 +--------------------------------------+--------------------------------------\
 +----------+-------+----------------+------+---------------------+
 | ID                                   | Resource ID                          \
@@ -844,7 +845,7 @@ class ShellSampleListCommandTest(utils.BaseTestCase):
 | cpu_util | gauge | 0.26           | %    | 2013-10-15T05:40:29 |
 +--------------------------------------+--------------------------------------\
 +----------+-------+----------------+------+---------------------+
-''', sys.stdout.getvalue())
+'''), sys.stdout.getvalue())
 
 
 class ShellSampleShowCommandTest(utils.BaseTestCase):
@@ -882,7 +883,7 @@ class ShellSampleShowCommandTest(utils.BaseTestCase):
         self.cc.new_samples.get.assert_called_once_with(
             "98b5f258-635e-11e4-8bdd-0025647390c1")
 
-        self.assertEqual('''\
+        self.assertEqual(ccc_utils.parse_date('''\
 +-------------+--------------------------------------+
 | Property    | Value                                |
 +-------------+--------------------------------------+
@@ -899,7 +900,7 @@ class ShellSampleShowCommandTest(utils.BaseTestCase):
 | user_id     | None                                 |
 | volume      | 1.0                                  |
 +-------------+--------------------------------------+
-''', sys.stdout.getvalue())
+'''), sys.stdout.getvalue())
 
     @mock.patch('sys.stdout', new=six.StringIO())
     def test_sample_show_raises_command_err(self):
@@ -1010,7 +1011,7 @@ class ShellSampleCreateListCommandTest(utils.BaseTestCase):
         ceilometer_shell.do_sample_create_list(self.cc, self.args)
         self.cc.samples.create_list.assert_called_with(self.samples,
                                                        direct=mock.ANY)
-        self.assertEqual('''\
+        self.assertEqual(ccc_utils.parse_date('''\
 +--------------------------------------+-------+------------+--------+-------\
 +----------------------------+
 | Resource ID                          | Name  | Type       | Volume | Unit  \
@@ -1029,7 +1030,7 @@ class ShellSampleCreateListCommandTest(utils.BaseTestCase):
 | 2015-05-19T12:00:08.368574 |
 +--------------------------------------+-------+------------+--------+-------\
 +----------------------------+
-''', sys.stdout.getvalue())
+'''), sys.stdout.getvalue())
 
 
 class ShellQuerySamplesCommandTest(utils.BaseTestCase):
@@ -1069,7 +1070,7 @@ class ShellQuerySamplesCommandTest(utils.BaseTestCase):
 
         ceilometer_shell.do_query_samples(self.cc, self.args)
 
-        self.assertEqual('''\
+        self.assertEqual(ccc_utils.parse_date('''\
 +--------------------------------------+--------------------------------------\
 +----------+-------+--------+----------+----------------------------+
 | ID                                   | Resource ID                          \
@@ -1080,7 +1081,7 @@ class ShellQuerySamplesCommandTest(utils.BaseTestCase):
 | instance | gauge | 1      | instance | 2014-02-19T05:50:16.673604 |
 +--------------------------------------+--------------------------------------\
 +----------+-------+--------+----------+----------------------------+
-''', sys.stdout.getvalue())
+'''), sys.stdout.getvalue())
 
     @mock.patch('sys.stdout', new=six.StringIO())
     def test_query_raises_command_error(self):
@@ -1236,7 +1237,7 @@ class ShellQueryAlarmHistoryCommandTest(utils.BaseTestCase):
 
         ceilometer_shell.do_query_alarm_history(self.cc, self.args)
 
-        self.assertEqual('''\
+        self.assertEqual(ccc_utils.parse_date('''\
 +----------------------------------+--------------------------------------+-\
 ------------+----------------------------------------------+----------------\
 ------------+
@@ -1252,7 +1253,7 @@ rule change | {"threshold": 42.0, "evaluation_periods": 4} | 2014-03-11T16:0\
 +----------------------------------+--------------------------------------+-\
 ------------+----------------------------------------------+----------------\
 ------------+
-''', sys.stdout.getvalue())
+'''), sys.stdout.getvalue())
 
     @mock.patch('sys.stdout', new=six.StringIO())
     def test_query_raises_command_err(self):
@@ -1569,7 +1570,7 @@ class ShellEventListCommandTest(utils.BaseTestCase):
                       for event in self.EVENTS]
         self.cc.events.list.return_value = ret_events
         ceilometer_shell.do_event_list(self.cc, self.args)
-        self.assertEqual('''\
+        self.assertEqual(ccc_utils.parse_date('''\
 +--------------------------------------+-------------------------------+\
 ----------------------------+-------------------------------+
 | Message ID                           | Event Type                    |\
@@ -1598,7 +1599,7 @@ class ShellEventListCommandTest(utils.BaseTestCase):
                             | +-------+--------+--------+   |
 +--------------------------------------+-------------------------------+\
 ----------------------------+-------------------------------+
-''', sys.stdout.getvalue())
+'''), sys.stdout.getvalue())
 
     @mock.patch('sys.stdout', new=six.StringIO())
     def test_event_list_no_traits(self):
@@ -1607,7 +1608,7 @@ class ShellEventListCommandTest(utils.BaseTestCase):
                       for event in self.EVENTS]
         self.cc.events.list.return_value = ret_events
         ceilometer_shell.do_event_list(self.cc, self.args)
-        self.assertEqual('''\
+        self.assertEqual(ccc_utils.parse_date('''\
 +--------------------------------------+-------------------------------\
 +----------------------------+
 | Message ID                           | Event Type                    \
@@ -1620,7 +1621,7 @@ class ShellEventListCommandTest(utils.BaseTestCase):
 | 2015-01-12T04:03:28.452495 |
 +--------------------------------------+-------------------------------\
 +----------------------------+
-''', sys.stdout.getvalue())
+'''), sys.stdout.getvalue())
 
 
 class ShellShadowedArgsTest(test_shell.ShellTestBase):
-- 
2.7.4

